# -*- coding: utf-8 -*-
"""Análise_Descritiva.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAc7SHyeAsdcpJxnUdVTxGZMrtLwNJaY

***
# <font color=green size=10>CURSO DE ESTATÍSTICA - PARTE 1</font>
***

## Trabalho de Análise Descritiva de um Conjunto de Dados

Utilizando os conhecimentos adquiridos em nosso treinamento realize uma análise descritiva básica de um conjunto de dados retirados da Pesquisa Nacional por Amostra de Domicílios - 2015 do IBGE.

Vamos construir histogramas, calcular e avaliar medidas de tendência central, medidas separatrizes e de dispersão dos dados.

Siga o roteiro proposto e vá completando as células vazias. Procure pensar em mais informações interessantes que podem ser exploradas em nosso dataset.

# <font color=green>DATASET DO PROJETO</font>
***

### Pesquisa Nacional por Amostra de Domicílios - 2015

A <b>Pesquisa Nacional por Amostra de Domicílios - PNAD</b> investiga anualmente, de forma permanente, características gerais da população, de educação, trabalho, rendimento e habitação e outras, com periodicidade variável, de acordo com as necessidades de informação para o país, como as características sobre migração, fecundidade, nupcialidade, saúde, segurança alimentar, entre outros temas. O levantamento dessas estatísticas constitui, ao longo dos 49 anos de realização da pesquisa, um importante instrumento para formulação, validação e avaliação de políticas orientadas para o desenvolvimento socioeconômico e a melhoria das condições de vida no Brasil.

### Fonte dos Dados

https://ww2.ibge.gov.br/home/estatistica/populacao/trabalhoerendimento/pnad2015/microdados.shtm

### Variáveis utilizadas

> ### Renda
> ***

Rendimento mensal do trabalho principal para pessoas de 10 anos ou mais de idade.

> ### Idade
> ***

Idade do morador na data de referência em anos.

> ### Altura (elaboração própria)
> ***

Altura do morador em metros.

> ### UF
> ***

|Código|Descrição|
|---|---|
|11|Rondônia|
|12|Acre|
|13|Amazonas|
|14|Roraima|
|15|Pará|
|16|Amapá|
|17|Tocantins|
|21|Maranhão|
|22|Piauí|
|23|Ceará|
|24|Rio Grande do Norte|
|25|Paraíba|
|26|Pernambuco|
|27|Alagoas|
|28|Sergipe|
|29|Bahia|
|31|Minas Gerais|
|32|Espírito Santo|
|33|Rio de Janeiro|
|35|São Paulo|
|41|Paraná|
|42|Santa Catarina|
|43|Rio Grande do Sul|
|50|Mato Grosso do Sul|
|51|Mato Grosso|
|52|Goiás|
|53|Distrito Federal|

> ### Sexo
> ***

|Código|Descrição|
|---|---|
|0|Masculino|
|1|Feminino|

> ### Anos de Estudo
> ***

|Código|Descrição|
|---|---|
|1|Sem instrução e menos de 1 ano|
|2|1 ano|
|3|2 anos|
|4|3 anos|
|5|4 anos|
|6|5 anos|
|7|6 anos|
|8|7 anos|
|9|8 anos|
|10|9 anos|
|11|10 anos|
|12|11 anos|
|13|12 anos|
|14|13 anos|
|15|14 anos|
|16|15 anos ou mais|
|17|Não determinados|
||Não aplicável|

> ### Cor
> ***

|Código|Descrição|
|---|---|
|0|Indígena|
|2|Branca|
|4|Preta|
|6|Amarela|
|8|Parda|
|9|Sem declaração|

#### <font color='red'>Observação</font>
***
> Os seguintes tratamentos foram realizados nos dados originais:
> 1. Foram eliminados os registros onde a <b>Renda</b> era inválida (999 999 999 999);
> 2. Foram eliminados os registros onde a <b>Renda</b> era missing;
> 3. Foram considerados somente os registros das <b>Pessoas de Referência</b> de cada domicílio (responsável pelo domicílio).

***
***

### Utilize a célula abaixo para importar as biblioteca que precisar para executar as tarefas
#### <font color='red'>Sugestões: pandas, numpy, seaborn</font>
"""

import pandas as pd
import numpy as np
import seaborn as sns

"""### Importe o dataset e armazene o conteúdo em uma DataFrame"""

dados = pd.read_csv('dados.csv')

"""### Visualize o conteúdo do DataFrame"""

dados.head()

# Tipo de dados
type(dados)

dados

"""### Para avaliarmos o comportamento da variável RENDA vamos construir uma tabela de frequências considerando as seguintes classes em salários mínimos (SM)
#### <font color='blue'>Descreva os pontos mais relevantes que você observa na tabela e no gráfico.</font>

Classes de renda:

<b>A</b> ► Acima de 25 SM

<b>B</b> ► De 15 a 25 SM

<b>C</b> ► De 5 a 15 SM

<b>D</b> ► De 2 a 5 SM

<b>E</b> ► Até 2 SM

Para construir as classes de renda considere que o salário mínimo na época da pesquisa era de <b>R$ 788,00</b>.

#### Siga os passos abaixo:

### 1º Definir os intevalos das classes em reais (R$)
"""

print(f'Valor Mínimo: {dados.Renda.min()}')
print(f'Valor Máximo: {dados.Renda.max()}')

classes = [
    dados.Renda.min(),
    2*788,
    5*788,
    15*788,
    25*788,
    dados.Renda.max()
]
classes

"""### 2º Definir os labels das classes"""

label = ['E', 'D', 'C', 'B', 'A']

"""### 3º Construir a coluna de frequências"""

pd.cut(
    x = dados.Renda,
    bins = classes,
    labels = label,
    include_lowest=True
)

pd.value_counts(pd.cut(
    x = dados.Renda,
    bins = classes,
    labels = label,
    include_lowest=True
))

frequencia = pd.value_counts(pd.cut(
    x = dados.Renda,
    bins = classes,
    labels = label,
    include_lowest=True
))
frequencia

"""### 4º Construir a coluna de percentuais"""

percentual = pd.value_counts(pd.cut(x = dados.Renda,
      bins = classes,
      labels = label,
      include_lowest=True),
      normalize=True)*100
percentual

"""### 5º Juntar as colunas de frequência e percentuais e ordenar as linhas de acordo com os labels das classes"""

dist_frequencias_personalizada = pd.DataFrame({'Frequência':frequencia, 'Porcentagem(%)':percentual})
dist_frequencias_personalizada

dist_frequencias_personalizada.sort_index(ascending=False)

"""### Construa um gráfico de barras para visualizar as informações da tabela de frequências acima"""

dist_frequencias_personalizada['Frequência'].plot.bar(
    width = 1,
    color = 'red',
    alpha = 0.2,
    figsize=(14,6)
)

dist_frequencias_personalizada['Porcentagem(%)'].plot.pie(
    figsize=(14,6)
)

dist_frequencias_personalizada.plot.pie(
    subplots=True,
    shadow=True,
    startangle=90,
    autopct='%1.2f%%',
    textprops=dict(color="w"),
    title="Gráfico v2",
    figsize=(11, 6))

import matplotlib.pyplot as plt
plt.subplot(1, 2, 1)
dist_frequencias_personalizada['Frequência'].plot.pie(
    shadow=True,
    startangle=90,
    autopct='%1.2f%%',
    textprops=dict(color="w"),
    figsize=(11, 6))

# Adicionando legenda ao gráfico 1
plt.legend(dist_frequencias_personalizada['Frequência'].index, title='Categorias', loc='center left', bbox_to_anchor=(1, 0.5))

plt.title('Frequência')
plt.ylabel('')  # Remova o rótulo do eixo y para evitar redundância em gráficos de pizza

plt.subplot(1, 2, 2)
dist_frequencias_personalizada['Porcentagem(%)'].plot.pie(
    shadow=True,
    startangle=90,
    autopct='%1.2f%%',
    textprops=dict(color="w"),
    figsize=(11, 6))

# Adicionando legenda ao gráfico 1
plt.legend(dist_frequencias_personalizada['Porcentagem(%)'].index, title='Categorias', loc='center left', bbox_to_anchor=(1, 0.5))

plt.title('Porcentagem(%)')
plt.ylabel('')  # Remova o rótulo do eixo y para evitar redundância em gráficos de pizza

# Ajuste de layout para evitar sobreposição
plt.tight_layout()
plt.show()

fig, axs = plt.subplots(1, 2, figsize=(12, 6))

axs[0].pie(dist_frequencias_personalizada['Frequência'], shadow=True, startangle=90, autopct='%1.2f%%', textprops=dict(color="w"))
axs[0].set_title("Gráfico Frequência")
axs[0].set_ylabel('')
axs[0].legend(dist_frequencias_personalizada.index, title='Categorias', loc='center left', bbox_to_anchor=(1, 0.5))

axs[1].pie(dist_frequencias_personalizada['Porcentagem(%)'], shadow=True, startangle=90, autopct='%1.2f%%', textprops=dict(color="w"))
axs[1].set_title("Gráfico Porcentagem(%)")
axs[1].set_ylabel('')
axs[1].legend(dist_frequencias_personalizada.index, title='Categorias', loc='center left', bbox_to_anchor=(1, 0.5))

# Adicionando um título geral para a figura
fig.suptitle('Título Geral', fontsize=16)

# Ajuste de layout para evitar sobreposição
plt.tight_layout()
plt.show()

""">
# **Análise Descritiva**
## **Conclusões**

Utilizamos a variável de Renda. Esta é uma variável quantitativa, mas foi transformada em uma variável qualitativa. O gráfico de barras e a tabela fornecem informações sobre a frequência e a porcentagem de ocorrência de diferentes categorias de Renda (A, B, C, D, E). Aqui estão algumas conclusões que podem ser extraídas:

#### **Distribuição de Frequência**:

* A maioria das ocorrências está na categoria 'E', com 49.755, representando 64,75% do total.
* As categorias 'C' e 'D' também têm ocorrências significativas, com 7.241 (9,42%) e 18.602 (24,21%), respectivamente.
* As categorias 'A' e 'B' têm ocorrências relativamente baixas em comparação com as outras.

#### **Ponderação da Distribuição**:

* As categorias 'D' e 'E' combinadas representam a grande maioria das ocorrências, com 89,96% do total.
* Isso sugere que as categorias 'D' e 'E' têm um peso considerável na distribuição geral.

#### **Desbalanceamento**:

* A distribuição não é uniforme, indicando um possível desbalanceamento nas ocorrências entre as diferentes categorias.
* Isso pode ter implicações significativas dependendo do contexto da análise.

#### **Importância Relativa**:

* Considerando a porcentagem, as categorias 'D' e 'E' são as mais importantes na amostra, enquanto 'A' e 'B' têm uma contribuição relativamente menor.

#### **Análise de Tendências**:

* A tabela sugere uma tendência crescente na frequência de ocorrências das categorias 'A', 'B', 'C', 'D' e 'E', com 'E' sendo a mais frequente.

#### **Possíveis Aplicações**:

* Dependendo do contexto, essa tabela pode ser usada para identificar áreas de foco, priorizar recursos ou entender a distribuição de algum fenômeno categorizado.

### Crie um histograma para as variáveis QUANTITATIVAS de nosso dataset
#### <font color='blue'>Descreva os pontos mais relevantes que você observa nos gráficos (assimetrias e seus tipos, possíveis causas para determinados comportamentos etc.)</font>
"""

ax = sns.histplot(dados.Idade, kde=True,)
ax.figure.set_size_inches(14, 6)
ax.set_title('Histograma da Idade', fontsize=18)
ax.set_xlabel('Anos', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

dados.Idade

ax = sns.histplot(dados.Altura, kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Altura', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

ax = sns.distplot(dados.Renda, kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Renda', fontsize=18)
ax.set_xlabel('R$', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

"""# Conclusões

O histograma da distribuição de renda gerado mostra a frequência ou a porcentagem de observações em diferentes faixas de renda. Vamos analisar algumas conclusões que podem ser retiradas do histograma:

**Distribuição da Renda**: A forma do histograma pode fornecer insights sobre a distribuição da renda na amostra. Por exemplo, se o histograma for assimétrico para a direita, pode indicar uma concentração de renda em valores mais baixos. Se for assimétrico para a esquerda, pode indicar uma concentração de renda em valores mais altos.

**Concentração de Renda**: Observando as barras do histograma, você pode identificar se há uma concentração significativa de renda em uma ou mais faixas específicas. Por exemplo, se a maioria das observações estiver em uma faixa estreita de renda, isso indica uma concentração.

**Outliers**: Barras muito altas ou valores extremamente altos podem indicar a presença de outliers ou valores atípicos na distribuição de renda. Esses valores atípicos podem ter um impacto significativo nas análises.

**Disparidade de Renda**: Se houver uma grande diferença entre as contagens ou porcentagens nas faixas de renda, isso sugere uma disparidade de renda. Por exemplo, se a maioria das observações estiver em faixas de renda mais baixas, enquanto uma pequena porcentagem estiver em faixas de renda mais altas, isso indica uma disparidade.

**Tendência Geral**: Se houver uma tendência geral no aumento ou na diminuição das frequências ou porcentagens com o aumento da renda, isso também é informativo. Pode indicar, por exemplo, se a renda está distribuída de maneira uniforme ou se existem grupos específicos com rendas mais altas ou mais baixas.

### Para a variável RENDA, construa um histograma somente com as informações das pessoas com rendimento até R$ 20.000,00
"""

vlr = dados.query('Renda == 5000')['Renda'].value_counts().values[0]
vlr

ax = sns.histplot(dados.query('Renda < 20000')['Renda'], kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Renda', fontsize=18)
ax.set_xlabel('R$', fontsize=14)
ax.set_xlim(0, 20000)
ax.set_xticks(np.arange(0, 20000 + 1, 5000))
ax.set_xticklabels(ax.get_xticks(), rotation=45, ha='right')
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
#ax

# Destacando a barra do ponto 1000 em vermelho
barra_destacada = 5000
for retangulo in ax.patches:
    if retangulo.get_x() < barra_destacada <= retangulo.get_x() + retangulo.get_width():
        retangulo.set_facecolor('red')

        # Adicionando a legenda à barra específica
        ax.text(retangulo.get_x() + retangulo.get_width() / 2, retangulo.get_height() + 1,
                f'{vlr}', ha='center', va='bottom', color='black')
plt.show()

dados.query('Renda == 5000')['Renda'].value_counts()

type(vlr)

vlr = dados.query('Renda == 5000')['Renda'].value_counts()
type(vlr)

"""### Construa uma tabela de frequências e uma com os percentuais do cruzando das variáveis SEXO e COR
#### <font color='blue'>Avalie o resultado da tabela e escreva suas principais conclusões</font>
#### <font color='red'>Utilize os dicionários abaixo para renomear as linha e colunas das tabelas de frequências e dos gráficos em nosso projeto</font>
"""

sexo = {
    0: 'Masculino',
    1: 'Feminino'
}
cor = {
    0: 'Indígena',
    2: 'Branca',
    4: 'Preta',
    6: 'Amarela',
    8: 'Parda',
    9: 'Sem declaração'
}
anos_de_estudo = {
    1: 'Sem instrução e menos de 1 ano',
    2: '1 ano',
    3: '2 anos',
    4: '3 anos',
    5: '4 anos',
    6: '5 anos',
    7: '6 anos',
    8: '7 anos',
    9: '8 anos',
    10: '9 anos',
    11: '10 anos',
    12: '11 anos',
    13: '12 anos',
    14: '13 anos',
    15: '14 anos',
    16: '15 anos ou mais',
    17: 'Não determinados'
}
uf = {
    11: 'Rondônia',
    12: 'Acre',
    13: 'Amazonas',
    14: 'Roraima',
    15: 'Pará',
    16: 'Amapá',
    17: 'Tocantins',
    21: 'Maranhão',
    22: 'Piauí',
    23: 'Ceará',
    24: 'Rio Grande do Norte',
    25: 'Paraíba',
    26: 'Pernambuco',
    27: 'Alagoas',
    28: 'Sergipe',
    29: 'Bahia',
    31: 'Minas Gerais',
    32: 'Espírito Santo',
    33: 'Rio de Janeiro',
    35: 'São Paulo',
    41: 'Paraná',
    42: 'Santa Catarina',
    43: 'Rio Grande do Sul',
    50: 'Mato Grosso do Sul',
    51: 'Mato Grosso',
    52: 'Goiás',
    53: 'Distrito Federal'
}

frequencia = pd.crosstab(dados.Sexo, dados.Cor)
frequencia.rename(index = sexo, inplace=True)
frequencia.rename(columns = cor, inplace=True)
frequencia

percentual = pd.crosstab(dados.Sexo,
                         dados.Cor,
                         normalize=True) *100
percentual.rename(index = sexo, inplace=True)
percentual.rename(columns = cor, inplace=True)
percentual

freq = dados.Sexo.value_counts()
freq

perc = dados.Sexo.value_counts(normalize=True)*100
perc

dist_quali = pd.DataFrame({'Frequencia': freq, 'Porcentagem (%)': perc})
dist_quali

dist_quali.rename(index = {0: 'M', 1:'F'})

dist_quali.rename(index = {0: 'Masculino', 1:'Feminino'}, inplace=True)
dist_quali

f = dados.Cor.value_counts()
f

p = dados.Cor.value_counts(normalize=True)*100
p

dist_ = pd.DataFrame({'Frequencia': f, 'Porcentagem (%)': p})
dist_

dist_.rename(index=cor)

dist_.rename(index = cor, inplace=True)
dist_

"""A tabela que você forneceu parece apresentar percentuais de distribuição racial por gênero. Vamos realizar uma análise exploratória considerando esses dados:

**Distribuição Racial por Gênero:**

* **Masculino**: A maioria da população masculina é classificada como branca (28.88%) ou parda (32.62%), enquanto as categorias de indígena, preta e amarela têm porcentagens menores.
* **Feminino**: Similarmente, a maioria da população feminina é classificada como branca (12.52%) ou parda (14.14%). As categorias de indígena, preta e amarela têm porcentagens menores.

**Disparidades entre Gêneros:**

* A distribuição racial entre os gêneros pode apresentar disparidades significativas. Por exemplo, as porcentagens para as categorias branca e parda são geralmente mais altas para o gênero masculino em comparação com o feminino.

**Proporções Relativas:**

* Os percentuais são relativos à população total de cada gênero. Isso significa que, por exemplo, 28.88% dos homens são classificados como brancos, enquanto 12.52% das mulheres são classificadas da mesma forma.

**Diversidade Racial:**

* A presença de diversas categorias raciais reflete uma diversidade na população, e essa diversidade é representada em ambos os gêneros.

**Baixas Percentagens em Algumas Categorias:**

* Em algumas categorias, como "Indígena", as porcentagens são relativamente baixas em ambos os gêneros. Isso pode indicar uma representação menor dessa categoria na amostra.

## Realize, para a variável RENDA, uma análise descritiva com as ferramentas que aprendemos em nosso treinamento

### Obtenha a média aritimética
"""

dados.Renda.mean()

"""### Obtenha a mediana"""

dados.Renda.median()

"""### Obtenha a moda"""

dados.Renda.mode()[0]

"""### Obtenha o desvio médio absoluto"""

dados.Renda.mad()

"""### Obtenha a variância"""

dados.Renda.var()

"""### Obtenha o desvio-padrão"""

dados.Renda.std()

"""### Obtenha a média, mediana e valor máximo da variável RENDA segundo SEXO e COR
#### <font color='blue'>Destaque os pontos mais importante que você observa nas tabulações</font>
#### <font color='red'>O parâmento <i>aggfunc</i> da função <i>crosstab()</i> pode receber uma lista de funções. Exemplo: <i>aggfunc = {'mean', 'median', 'max'}</i></font>
"""

renda_estatistica_por_sexo_e_cor = pd.crosstab(
    dados.Cor,
    dados.Sexo,
    values = dados.Renda,
    aggfunc = [len, np.mean, np.median, np.std, np.max, np.min, lambda x: x.mode().iloc[0]])
renda_estatistica_por_sexo_e_cor.rename(index = cor, inplace = True)
renda_estatistica_por_sexo_e_cor.rename(columns = sexo, inplace = True)
renda_estatistica_por_sexo_e_cor

renda_estatistica_por_sexo_e_cor = pd.crosstab(
    dados.Cor,
    dados.Sexo,
    values = dados.Renda,
    aggfunc = [len, np.mean, np.median, np.max, np.min])
renda_estatistica_por_sexo_e_cor.rename(index = cor, inplace = True)
renda_estatistica_por_sexo_e_cor.rename(columns = sexo, inplace = True)
renda_estatistica_por_sexo_e_cor

"""> ### Conclusões


A tabela fornecida apresenta estatísticas resumidas da renda, desagregadas por cor e sexo. Vamos analisar algumas conclusões que podem ser retiradas desta tabela:

1. **Tendências Gerais**: A tabela fornece informações sobre a quantidade de dados (len), a média (mean), a mediana (median), o desvio padrão (std), o valor máximo (amax), o valor mínimo (amin) e a moda para cada combinação de cor e sexo.

2. **Disparidades de Renda entre Cores e Sexos:** Comparando as médias e medianas de renda, é possível observar disparidades significativas entre diferentes grupos. Por exemplo, pode-se observar que a média de renda para homens brancos é maior do que a média de renda para homens pretos.

3. **Variabilidade da Renda:** O desvio padrão (std) fornece uma medida da variabilidade da renda dentro de cada grupo. Valores mais altos indicam maior dispersão dos dados em torno da média.

4. **Renda Máxima e Mínima:** Os valores máximos (amax) e mínimos (amin) indicam os extremos da distribuição de renda para cada grupo. Isso destaca a amplitude da distribuição de renda dentro de cada categoria.

5. **Moda:** A moda indica o valor mais frequente na distribuição de renda para cada grupo. Isso pode ser útil para entender os valores mais comuns.

6. **Estratificação por Cor e Sexo:** A tabela está estratificada por cor e sexo, permitindo uma análise mais detalhada das disparidades de renda em subgrupos específicos.

7. **Quantidade de Dados por Grupo:** A coluna "len" fornece a quantidade de dados em cada grupo, o que é importante para avaliar a representatividade estatística.

8. **Observações sobre Grupos Específicos:** Por exemplo, para a categoria "Amarela", nota-se uma média de renda mais alta para os homens em comparação com as mulheres, mas a amostra é relativamente pequena.

### Obtenha as medidas de dispersão da variável RENDA segundo SEXO e COR
#### <font color='blue'>Destaque os pontos mais importante que você observa nas tabulações</font>
#### <font color='red'>O parâmento <i>aggfunc</i> da função <i>crosstab()</i> pode receber uma lista de funções. Exemplo: <i>aggfunc = {'mad', 'var', 'std'}</i></font>
"""

renda_estatistica_por_sexo_e_cor = pd.crosstab(
    dados.Cor,
    dados.Sexo,
    values = dados.Renda,
    aggfunc = {'mad', 'var', 'std'})
renda_estatistica_por_sexo_e_cor.rename(index = cor, inplace = True)
renda_estatistica_por_sexo_e_cor.rename(columns = sexo, inplace = True)
renda_estatistica_por_sexo_e_cor

"""> ### Conclusões

Escreva suas conclusões aqui...

### Construa um box plot da variável RENDA segundo SEXO e COR
#### <font color='blue'>É possível verificar algum comportamento diferenciado no rendimento entre os grupos de pessoas analisados? Avalie o gráfico e destaque os pontos mais importantes.</font>
#### <font color='red'>1º - Utilize somente as informações de pessoas com renda abaixo de R$ 10.000</font>
#### <font color='red'>2º - Para incluir uma terceira variável na construção de um boxplot utilize o parâmetro <i>hue</i> e indique a variável que quer incluir na subdivisão.</font>
#### Mais informações: https://seaborn.pydata.org/generated/seaborn.boxplot.html
"""

dados.Cor.value_counts()

ax = sns.boxplot(x = 'Renda', y = 'Cor', hue = 'Sexo', data=dados.query('Renda < 5000'), orient='h')
ax.figure.set_size_inches(14, 8)    # Personalizando o tamanho da figura
ax.set_title('Box-plot da RENDA por SEXO e COR', fontsize=18)    # Configurando o título do gráfico
ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X
ax.set_ylabel('Cor', fontsize=14)    # Configurando o label do eixo Y

# Configurando o label de cada categoria do eixo Y
ax.set_yticklabels(['Indígena', 'Branca', 'Preta', 'Amarela', 'Parda'], fontsize=12)

# Configurações da legenda do gráfico (Sexo)
handles, _ = ax.get_legend_handles_labels()
ax.legend(handles, ['M', 'F'], fontsize=12)

ax

ax = sns.boxplot(x = 'Renda',
                 y = 'Cor',
                 hue = 'Sexo',
                 data = dados.query('Cor == 0 and Renda < 5000'),
                 orient='h')
ax.figure.set_size_inches(10, 4)    # Personalizando o tamanho da figura
ax.set_title('Box-plot da RENDA por SEXO e COR', fontsize=18)    # Configurando o título do gráfico
ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X
ax.set_ylabel('Cor', fontsize=14)    # Configurando o label do eixo Y

# Configurando o label de cada categoria do eixo Y
ax.set_yticklabels(['Indígena'], fontsize=12)

# Configurações da legenda do gráfico (Sexo)
handles, _ = ax.get_legend_handles_labels()
ax.legend(handles, ['M', 'F'], fontsize=12)

ax

ax = sns.boxplot(x = 'Renda',
                 y = 'Cor',
                 hue = 'Sexo',
                 data = dados.query('Cor == 2 and Renda < 5000'),
                 orient='h')
ax.figure.set_size_inches(10, 4)    # Personalizando o tamanho da figura
ax.set_title('Box-plot da RENDA por SEXO e COR', fontsize=18)    # Configurando o título do gráfico
ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X
ax.set_ylabel('Cor', fontsize=14)    # Configurando o label do eixo Y

# Configurando o label de cada categoria do eixo Y
ax.set_yticklabels(['Branca'], fontsize=12)

# Configurações da legenda do gráfico (Sexo)
handles, _ = ax.get_legend_handles_labels()
ax.legend(handles, ['M', 'F'], fontsize=12)

ax

ax = sns.boxplot(x = 'Renda',
                 y = 'Cor',
                 hue = 'Sexo',
                 data = dados.query('Cor == 4 and Renda < 5000'),
                 orient='h')
ax.figure.set_size_inches(10, 4)    # Personalizando o tamanho da figura
ax.set_title('Box-plot da RENDA por SEXO e COR', fontsize=18)    # Configurando o título do gráfico
ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X
ax.set_ylabel('Cor', fontsize=14)    # Configurando o label do eixo Y

# Configurando o label de cada categoria do eixo Y
ax.set_yticklabels(['Preta'], fontsize=12)

# Configurações da legenda do gráfico (Sexo)
handles, _ = ax.get_legend_handles_labels()
ax.legend(handles, ['M', 'F'], fontsize=12)

ax

ax = sns.histplot(dados.Cor, kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Altura', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

ax = sns.histplot(data = d, kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Cor', fontsize=18)
ax.set_xlabel('Reças', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

"""> ### Conclusões

Escreva suas conclusões aqui...
"""

ax = sns.histplot(dados.Altura, kde=True)
# kde = False retira uma PDF que ele passa junto com o hist
ax.figure.set_size_inches(12, 6) # Altura. Largura
ax.set_title('Histograma da Altura', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax.grid(True)
ax

ax = sns.boxplot( x = 'Altura', data = dados, orient = 'h')
ax.figure.set_size_inches(12, 4)
ax.set_title('Altura', fontsize=18)
ax.set_xlabel('Metros', fontsize=14)
ax

import matplotlib.pyplot as plt
import seaborn as sns

# Configuração da grade de subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

# Primeiro subplot - Histograma
sns.histplot(dados.Altura, kde=True, ax=ax1)
ax1.set_title('Histograma da Altura', fontsize=18)
ax1.set_xlabel('Metros', fontsize=14)
ax1.set_ylabel('Quantidade', fontsize=14)
sns.set_style("whitegrid")
ax1.grid(True)

# Segundo subplot - Boxplot
sns.boxplot(x='Altura', data=dados, orient='h', ax=ax2)
ax2.set_title('Altura', fontsize=18)
ax2.set_xlabel('Metros', fontsize=14)

# Ajusta o layout para evitar sobreposições
plt.tight_layout()

# Exibe o gráfico
plt.show()

"""# <font color="red">DESAFIO<font>
### Qual percentual de pessoas de nosso <i>dataset</i> ganham um salário mínimo (R$ 788,00) ou menos?
#### <font color='red'>Utilize a função <i>percentileofscore()</i> do <i>scipy</i> para realizar estas análises.</font>
#### Mais informações: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html

"""

from scipy import stats

percentual = stats.percentileofscore(dados.Renda, 788, kind='weak')
desvio_padrao = dados.Renda.std()
print("Percentil: {:.4f}%, Desvio Padrão: ±{:.2f}".format(percentual, desvio_padrao))

"""### Qual o valor máximo ganho por 99% das pessoas de nosso <i>dataset</i>?
#### <font color='red'>Utilize o método <i>quantile()</i> do <i>pandas</i> para realizar estas análises.</font>
"""

valor = dados.Renda.quantile(.99)
print("R$ {:.2f}".format(valor))

"""### Obtenha a média, mediana, valor máximo e desvio-padrão da variável RENDA segundo ANOS DE ESTUDO e SEXO
#### <font color='blue'>Destaque os pontos mais importante que você observa nas tabulações</font>
#### <font color='red'>O parâmento <i>aggfunc</i> da função <i>crosstab()</i> pode receber uma lista de funções. Exemplo: <i>aggfunc = ['mean', 'median', 'max', 'std']</i></font>
"""

renda_estatisticas_por_sexo_e_estudo = pd.crosstab(dados['Anos de Estudo'],
                                                   dados.Sexo,
                                                   aggfunc = {'mean', 'median', 'max', 'std'},
                                                   values = dados.Renda).round(2)
renda_estatisticas_por_sexo_e_estudo.rename(index = anos_de_estudo, inplace = True)
renda_estatisticas_por_sexo_e_estudo.rename(columns = sexo, inplace = True)
renda_estatisticas_por_sexo_e_estudo

"""### Construa um box plot da variável RENDA segundo ANOS DE ESTUDO e SEXO
#### <font color='blue'>É possível verificar algum comportamento diferenciado no rendimento entre os grupos de pessoas analisados? Avalie o gráfico e destaque os pontos mais importantes.</font>
#### <font color='red'>1º - Utilize somente as informações de pessoas com renda abaixo de R$ 10.000</font>
#### <font color='red'>2º - Utilize a variável IDADE para identificar se a desigualdade se verifica para pessoas de mesma idade. Exemplo: <i>data=dados.query('Renda < 10000 and Idade == 40')</i> ou <i>data=dados.query('Renda < 10000 and Idade == 50')</i></font>
#### <font color='red'>3º - Para incluir uma terceira variável na construção de um boxplot utilize o parâmetro <i>hue</i> e indique a variável que quer incluir na subdivisão.</font>
#### Mais informações: https://seaborn.pydata.org/generated/seaborn.boxplot.html
"""

ax = sns.boxplot(x = 'Renda', y = 'Anos de Estudo', hue = 'Sexo', data=dados.query('Renda < 10000 and Idade == 50'), orient='h')

ax.figure.set_size_inches(14, 8)    # Personalizando o tamanho da figura

ax.set_title('Box-plot da RENDA por SEXO e ANOS DE ESTUDO', fontsize=18)    # Configurando o título do gráfico

ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X

ax.set_ylabel('Anos de Estudo', fontsize=14)    # Configurando o label do eixo Y
ax.set_yticklabels([key for key in anos_de_estudo.values()], fontsize=12)    # Configurando o label de cada categoria do eixo Y

# Configurações da legenda do gráfico (Sexo)
handles, _ = ax.get_legend_handles_labels()
ax.legend(handles, ['Masculino', 'Feminino'], fontsize=12)

ax

"""> ### Conclusões

Escreva suas conclusões aqui...

### Obtenha a média, mediana, valor máximo e desvio-padrão da variável RENDA segundo as UNIDADES DA FEDERAÇÃO
#### <font color='blue'>Destaque os pontos mais importante que você observa nas tabulações</font>
#### <font color='red'>Utilize o método <i>groupby()</i> do <i>pandas</i> juntamente com o método <i>agg()</i> para contruir a tabulação. O método <i>agg()</i> pode receber um dicionário especificando qual coluna do DataFrame deve ser utilizada e qual lista de funções estatísticas queremos obter, por exemplo: <i>dados.groupby(['UF']).agg({'Renda': ['mean', 'median', 'max', 'std']})</i></font>
"""

renda_estatisticas_por_uf = dados.groupby(['UF']).agg({'Renda': ['mean', 'median', 'max', 'std']})
renda_estatisticas_por_uf.rename(index = uf)

"""### Construa um box plot da variável RENDA segundo as UNIDADES DA FEDERAÇÃO
#### <font color='blue'>É possível verificar algum comportamento diferenciado no rendimento entre os grupos analisados? Avalie o gráfico e destaque os pontos mais importantes.</font>
#### <font color='red'>1º - Utilize somente as informações de pessoas com renda abaixo de R$ 10.000</font>
"""

ax = sns.boxplot(x = 'Renda', y = 'UF', data=dados.query('Renda < 10000'), orient='h')

ax.figure.set_size_inches(14, 8)    # Personalizando o tamanho da figura

ax.set_title('Box-plot da RENDA por ESTADOS', fontsize=18)    # Configurando o título do gráfico

ax.set_xlabel('R$', fontsize=14)    # Configurando o label do eixo X

ax.set_ylabel('Estados', fontsize=14)    # Configurando o label do eixo Y
ax.set_yticklabels([key for key in uf.values()], fontsize=12)    # Configurando o label de cada categoria do eixo Y

ax

"""> ### Conclusões

Escreva suas conclusões aqui...
"""